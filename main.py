import json
import telebot
from telebot import types
import WeatherApi
import db
import requests


def start_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(telebot.types.KeyboardButton('\U0001F3E0 –ü–æ–≥–æ–¥–∞ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ'),
                 telebot.types.KeyboardButton('\U0001F50D –ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ'),
                 telebot.types.KeyboardButton('\U00002699\U0000FE0F –ü–∞—Ä–∞–º–µ—Ç—Ä—ã'))
    return keyboard


def settings_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton('üåè –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='change_geo'),
                 telebot.types.InlineKeyboardButton('üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω', callback_data='change_key'))
    return keyboard


def get_weather_for_inline(request_id, tg_id):
    result = None
    key = db.get_user_key(tg_id)
    geo = db.get_user_geo(tg_id)
    if key is None or geo is None:
        result = '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
        return result
    else:
        weather = WeatherApi.WeatherApi(key, geo)
        weather.get()
        if request_id == 0:
            result = 'üèôÔ∏è  {0}' \
                     '\n\nüå°Ô∏è  {1}¬∞C / {2}' \
                     '\nüö©  –ü–æ –æ—â—É—â–µ–Ω–∏—è–º {7}¬∞C' \
                     '\n\n‚è≤Ô∏è  –î–∞–≤–ª–µ–Ω–∏–µ {3} –º–º' \
                     '\nüíß  –í–ª–∞–∂–Ω–æ—Å—Ç—å {4}%' \
                     '\nüåÄ  –í–µ—Ç–µ—Ä {5} –º/c {6}' \
                .format(
                    weather.city,
                    weather.temp,
                    weather.description,
                    weather.pressure,
                    weather.humidity,
                    weather.wind[0],
                    weather.wind[1],
                    weather.feels
                )
        elif request_id == 1:
            result = '{0} {1}¬∞C'.format(weather.city, weather.temp)
        return result


def get_another_city_for_inline(request_id, tg_id, geo):
    result = None
    key = db.get_user_key(tg_id)
    if key is None:
        result = '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /start'
        return result
    else:
        weather = WeatherApi.WeatherApi(key, geo)
        if weather.get() == 200:
            if request_id == 0:
                result = 'üèôÔ∏è  {0}' \
                         '\n\nüå°Ô∏è  {1}¬∞C / {2}' \
                         '\nüö©  –ü–æ –æ—â—É—â–µ–Ω–∏—è–º {7}¬∞C' \
                         '\n\n‚è≤Ô∏è  –î–∞–≤–ª–µ–Ω–∏–µ {3} –º–º' \
                         '\nüíß  –í–ª–∞–∂–Ω–æ—Å—Ç—å {4}%' \
                         '\nüåÄ  –í–µ—Ç–µ—Ä {5} –º/c {6}' \
                    .format(
                        weather.city,
                        weather.temp,
                        weather.description,
                        weather.pressure,
                        weather.humidity,
                        weather.wind[0],
                        weather.wind[1],
                        weather.feels
                    )
            elif request_id == 1:
                result = 'üîç {0} - {1}¬∞C'.format(weather.city, weather.temp)
        else:
            result = '‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞'
        return result


def main():
    with open('config.json') as f:
        conf = json.load(f)
    bot_token = conf['bot_api_key']
    bot = telebot.TeleBot(bot_token)

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        key = db.get_user_key(message.from_user.id)
        if key is None:
            msg = bot.send_message(message.from_user.id,
                                   '<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –®–∞–≥ 1/2</b>'
                                   '\n\nüîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω OpenWeatherApi',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, welcome_step2)
        else:
            bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã üôÇ')

    def welcome_step2(message):
        key = message.text
        r = requests.get('https://api.openweathermap.org/data/2.5/weather', params={'q': 'Moscow', 'appid': key})
        if r.status_code == 200:
            msg = bot.send_message(message.from_user.id,
                                   '<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –®–∞–≥ 2/2</b>\n\n'
                                   'üåè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫)',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, welcome_step3, key)
        else:
            msg = bot.send_message(message.from_user.id,
                                   '‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ª–∏–±–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º OpenWeather –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'
                                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, welcome_step2)

    def welcome_step3(message, key):
        r = requests.get('https://api.openweathermap.org/data/2.5/weather', params={'q': message.text, 'appid': key})
        if r.status_code == 200:
            db.register_user(message.from_user.id, key, message.text)
            bot.send_message(message.from_user.id,
                             '‚úîÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ',
                             reply_markup=start_keyboard())
        else:
            msg = bot.send_message(message.from_user.id,
                                   '‚ùå –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º OpenWeather –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                                   '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, welcome_step3, key)

    @bot.message_handler(commands=['weather'])
    def send_weather(message):
        key, geo = db.get_user_key(message.from_user.id), db.get_user_geo(message.from_user.id)
        if key is None or geo is None:
            bot.send_message(message.from_user.id, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        else:
            weather = WeatherApi.WeatherApi(key, geo)
            if weather.get() == 200:
                bot.send_message(message.from_user.id,
                                 'üèôÔ∏è  <b>{0}</b>'
                                 '\n\nüå°Ô∏è  <b>{1}¬∞C / {2}</b>'
                                 '\nüö©  –ü–æ –æ—â—É—â–µ–Ω–∏—è–º <b>{7}¬∞C</b>'
                                 '\n\n‚è≤Ô∏è  –î–∞–≤–ª–µ–Ω–∏–µ <b>{3} –º–º</b>'
                                 '\nüíß  –í–ª–∞–∂–Ω–æ—Å—Ç—å <b>{4}%</b>'
                                 '\nüåÄ  –í–µ—Ç–µ—Ä <b>{5} –º/c {6}</b>'
                                 .format(
                                     weather.city,
                                     weather.temp,
                                     weather.description,
                                     weather.pressure,
                                     weather.humidity,
                                     weather.wind[0],
                                     weather.wind[1],
                                     weather.feels
                                 ),
                                 parse_mode='html', reply_markup=start_keyboard())
            else:
                bot.send_message(message.from_user.id,
                                 '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ!')

    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        if message.text == '\U0001F3E0 –ü–æ–≥–æ–¥–∞ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ':
            send_weather(message)
        elif message.text == '\U0001F50D –ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ':
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
            bot.register_next_step_handler(msg, another_city)
        elif message.text == '\U00002699\U0000FE0F –ü–∞—Ä–∞–º–µ—Ç—Ä—ã':
            bot.send_message(message.from_user.id, "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
                             parse_mode='html',
                             reply_markup=settings_keyboard())

    def another_city(message):
        geo = message.text
        key = db.get_user_key(message.from_user.id)
        if key is None:
            bot.send_message(message.from_user.id, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /start')
        else:
            weather = WeatherApi.WeatherApi(key, geo)
            if weather.get() == 200:
                bot.send_message(message.from_user.id,
                                 'üèôÔ∏è  <b>{0}</b>'
                                 '\n\nüå°Ô∏è  <b>{1}¬∞C / {2}</b>'
                                 '\nüö©  –ü–æ –æ—â—É—â–µ–Ω–∏—è–º <b>{7}¬∞C</b>'
                                 '\n\n‚è≤Ô∏è  –î–∞–≤–ª–µ–Ω–∏–µ <b>{3} –º–º</b>'
                                 '\nüíß  –í–ª–∞–∂–Ω–æ—Å—Ç—å <b>{4}%</b>'
                                 '\nüåÄ  –í–µ—Ç–µ—Ä <b>{5} –º/c {6}</b>'
                                 .format(
                                     weather.city,
                                     weather.temp,
                                     weather.description,
                                     weather.pressure,
                                     weather.humidity,
                                     weather.wind[0],
                                     weather.wind[1],
                                     weather.feels
                                 ),
                                 parse_mode='html', reply_markup=start_keyboard())
            else:
                msg = bot.send_message(message.from_user.id, '‚ùå –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(msg, another_city)

    @bot.inline_handler(lambda query: len(query.query) == 0)
    def query_text(inline_query):
        try:
            r = types.InlineQueryResultArticle('1', get_weather_for_inline(1, inline_query.from_user.id),
                                               types.InputTextMessageContent(
                                                   get_weather_for_inline(0, inline_query.from_user.id)))
            bot.answer_inline_query(inline_query.id, [r])
        except Exception as e:
            print(e)

    @bot.inline_handler(lambda query: len(query.query) > 0)
    def query_text(inline_query):
        try:
            r = types.InlineQueryResultArticle('1',
                                               get_another_city_for_inline(1, inline_query.from_user.id, inline_query.query),
                                               types.InputTextMessageContent(
                                                   get_another_city_for_inline(0, inline_query.from_user.id, inline_query.query)))
            bot.answer_inline_query(inline_query.id, [r])
        except Exception as e:
            print(e)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
        if call.data == 'change_geo':
            msg = bot.send_message(call.from_user.id, 'üåè –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º')
            bot.register_next_step_handler(msg, change_geo)
        elif call.data == 'change_key':
            msg = bot.send_message(call.from_user.id, 'üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω OpenWeatherApi')
            bot.register_next_step_handler(msg, change_key)

    def change_geo(message):
        geo = message.text
        db.put_user_geo(message.from_user.id, geo)
        bot.send_message(message.from_user.id, 'üåè –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=start_keyboard())

    def change_key(message):
        key = message.text
        db.put_user_geo(message.from_user.id, key)
        bot.send_message(message.from_user.id, 'üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=start_keyboard())

    bot.polling(none_stop=True, interval=0)


if __name__ == '__main__':
    main()
